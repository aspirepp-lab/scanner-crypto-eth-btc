name: Scanner Crypto ETH/BTC Focus

on:
  schedule:
    # Executa a cada 15 minutos durante hor√°rio de trading
    - cron: '*/15 6-23 * * *'
  workflow_dispatch: {}  # Permite execu√ß√£o manual

# Evita execu√ß√µes simult√¢neas se um job atrasar
concurrency:
  group: scanner-crypto
  cancel-in-progress: false

permissions:
  contents: write  # üîß ALTERADO: read ‚Üí write para permitir commits

jobs:
  crypto-scanner:
    runs-on: ubuntu-latest
    timeout-minutes: 12

    env:
      # Ajusta timezone para logs coerentes com Bras√≠lia
      TZ: America/Sao_Paulo

      # (Opcional) Secrets usados pelo script
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      FMP_API_KEY: ${{ secrets.FMP_API_KEY }}

      # ====== FLAGS (ligar/desligar recursos do main.py) ======
      ATIVAR_MACRO_UNICO: "true"
      ATIVAR_SCORE_COMPONENTES: "true"
      ATIVAR_VWAP: "true"
      ATIVAR_BBWIDTH: "true"
      ATIVAR_FILTRO_LIQUIDEZ: "false"
      LIQ_MINIMO_30D: "0"

      # Pesos do score 0‚Äì100
      PESO_TENDENCIA: "1.0"
      PESO_MOMENTO: "1.0"
      PESO_VOLUME: "1.0"
      PESO_VOLATILIDADE: "1.0"
      PESO_CONFLUENCIA: "1.0"

    steps:
      - name: üèÅ Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Necess√°rio para commits

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: üì¶ Install dependencies (requirements.txt)
        run: |
          python -m pip install --upgrade pip setuptools wheel
          if [ -f requirements.txt ]; then
            pip install --no-cache-dir -r requirements.txt
          else
            echo "‚ùå requirements.txt n√£o encontrado na raiz do reposit√≥rio."
            exit 1
          fi

      - name: üîé Show versions
        run: |
          python - << 'PY'
          import sys, importlib
          print("Python:", sys.version)
          for m in ("ccxt","pandas","ta","pandas_ta","requests"):
              try:
                  mod = importlib.import_module(m)
                  ver = getattr(mod, "__version__", "n/a")
                  print(f"{m}: {ver}")
              except Exception as e:
                  print(f"{m}: ‚ùå ({e})")
          PY

      - name: ‚úÖ Verify Installation
        run: |
          python - << 'PY'
          import sys
          required_modules = ['pandas', 'numpy', 'ccxt', 'ta', 'requests']
          ok = True
          for module in required_modules:
              try:
                  __import__(module)
                  print(f'‚úÖ {module}: OK')
              except Exception as e:
                  print(f'‚ùå {module}: FAILED - {e}')
                  ok = False
          sys.exit(0 if ok else 1)
          PY

      - name: üß∞ System & Resources
        run: |
          python --version
          pip --version
          echo ""
          echo "üìÇ Workspace:"
          ls -lah
          echo ""
          echo "üíæ Espa√ßo em disco:"
          df -h
          echo ""
          echo "üß† Mem√≥ria:"
          free -h

      - name: ‚ñ∂Ô∏è Run Scanner
        run: |
          set -e
          # Detecta arquivo de entrada (prefer√™ncia: main.py; fallback: scanner.py)
          if [ -f main.py ]; then EP=main.py;
          elif [ -f scanner.py ]; then EP=scanner.py;
          else echo "‚ùå Nenhum entrypoint encontrado (main.py/scanner.py)."; exit 1; fi
          echo "Entrypoint: $EP"
          echo "üîß Flags -> MACRO=$ATIVAR_MACRO_UNICO SCORE=$ATIVAR_SCORE_COMPONENTES VWAP=$ATIVAR_VWAP BBWIDTH=$ATIVAR_BBWIDTH LIQ=$ATIVAR_FILTRO_LIQUIDEZ MIN_LIQ=$LIQ_MINIMO_30D"
          echo "üîß Pesos  -> TEND=$PESO_TENDENCIA MOM=$PESO_MOMENTO VOL=$PESO_VOLUME VOLAT=$PESO_VOLATILIDADE CONF=$PESO_CONFLUENCIA"
          python "$EP"

      # üÜï NOVO STEP: Commit autom√°tico de dados persistentes
      - name: üíæ Commit dados persistentes
        if: success()
        run: |
          # Configurar git
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Actions Bot"
          
          # Criar diret√≥rios se n√£o existirem
          mkdir -p data logs
          
          # Adicionar arquivos de dados (for√ßar inclus√£o mesmo se no .gitignore)
          git add -f data/ledger_sinais.csv 2>/dev/null || echo "‚ö†Ô∏è Ledger n√£o encontrado"
          git add -f data/throttle.json 2>/dev/null || echo "‚ö†Ô∏è Throttle n√£o encontrado"
          git add -f logs/scanner_*.log 2>/dev/null || echo "‚ö†Ô∏è Logs n√£o encontrados"
          
          # Verificar se h√° mudan√ßas para commitar
          if git diff --staged --quiet; then
            echo "‚úÖ Nenhuma mudan√ßa nos dados para commit"
          else
            # Fazer commit
            TIMESTAMP=$(date -u +'%Y-%m-%d %H:%M:%S UTC')
            SINAIS_COUNT=$(wc -l < data/ledger_sinais.csv 2>/dev/null | tr -d ' ' || echo "0")
            
            git commit -m "üìä Auto-update dados [${TIMESTAMP}]

- Ledger: ${SINAIS_COUNT} sinais registrados
- Throttle atualizado
- Logs persistidos

[skip ci]"
            
            # Push para o reposit√≥rio
            git push
            echo "‚úÖ Dados persistidos com sucesso!"
          fi

      - name: üì§ Upload Artifacts (logs, relat√≥rios)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scanner-artifacts-${{ github.run_number }}
          path: |
            logs/**
            data/**
            output/**
            reports/**
          if-no-files-found: ignore
          retention-days: 7

      - name: üßπ Cleanup on Failure
        if: failure()
        run: |
          pip cache purge || true
          find . -name "*.pyc" -delete || true
          find . -name "__pycache__" -type d -exec rm -rf {} + || true
