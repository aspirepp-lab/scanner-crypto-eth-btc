name: Scanner Crypto ETH/BTC Focus

on:
  schedule:
    - cron: '*/15 6-23 * * *'
  workflow_dispatch: {}

concurrency:
  group: scanner-crypto
  cancel-in-progress: false

permissions:
  contents: write

jobs:
  crypto-scanner:
    runs-on: ubuntu-latest
    timeout-minutes: 12

    env:
      TZ: America/Sao_Paulo
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      FMP_API_KEY: ${{ secrets.FMP_API_KEY }}
      ATIVAR_MACRO_UNICO: "true"
      ATIVAR_SCORE_COMPONENTES: "true"
      ATIVAR_VWAP: "true"
      ATIVAR_BBWIDTH: "true"
      ATIVAR_FILTRO_LIQUIDEZ: "false"
      LIQ_MINIMO_30D: "0"
      PESO_TENDENCIA: "1.0"
      PESO_MOMENTO: "1.0"
      PESO_VOLUME: "1.0"
      PESO_VOLATILIDADE: "1.0"
      PESO_CONFLUENCIA: "1.0"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          if [ -f requirements.txt ]; then
            pip install --no-cache-dir -r requirements.txt
          else
            echo "Erro: requirements.txt nao encontrado"
            exit 1
          fi

      - name: Show versions
        run: |
          python - << 'PY'
          import sys, importlib
          print("Python:", sys.version)
          for m in ("ccxt","pandas","ta","pandas_ta","requests"):
              try:
                  mod = importlib.import_module(m)
                  ver = getattr(mod, "__version__", "n/a")
                  print(f"{m}: {ver}")
              except Exception as e:
                  print(f"{m}: ERRO ({e})")
          PY

      - name: Verify Installation
        run: |
          python - << 'PY'
          import sys
          required_modules = ['pandas', 'numpy', 'ccxt', 'ta', 'requests']
          ok = True
          for module in required_modules:
              try:
                  __import__(module)
                  print(f'OK {module}')
              except Exception as e:
                  print(f'FALHOU {module}: {e}')
                  ok = False
          sys.exit(0 if ok else 1)
          PY

      - name: System Info
        run: |
          python --version
          pip --version
          ls -lah
          df -h
          free -h

      - name: Run Scanner
        run: |
          set -e
          if [ -f main.py ]; then EP=main.py;
          elif [ -f scanner.py ]; then EP=scanner.py;
          else echo "Erro: Nenhum entrypoint encontrado"; exit 1; fi
          echo "Entrypoint: $EP"
          python "$EP"

      - name: Commit dados persistentes
        if: success()
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Actions Bot"
          
          mkdir -p data logs
          
          git add -f data/ledger_sinais.csv 2>/dev/null || true
          git add -f data/throttle.json 2>/dev/null || true
          git add -f logs/scanner_*.log 2>/dev/null || true
          
          if git diff --staged --quiet; then
            echo "Sem mudancas para commit"
          else
            TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
            SINAIS=$(wc -l < data/ledger_sinais.csv 2>/dev/null | tr -d ' ' || echo "0")
            
            git commit -m "Auto-update ${TIMESTAMP}" -m "Sinais: ${SINAIS}" -m "[skip ci]"
            git push
            echo "Dados persistidos"
          fi

      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scanner-artifacts-${{ github.run_number }}
          path: |
            logs/**
            data/**
            output/**
            reports/**
          if-no-files-found: ignore
          retention-days: 7

      - name: Cleanup on Failure
        if: failure()
        run: |
          pip cache purge || true
          find . -name "*.pyc" -delete || true
          find . -name "__pycache__" -type d -exec rm -rf {} + || true
