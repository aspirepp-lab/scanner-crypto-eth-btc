# interface/explicador_sinais.py
from typing import Dict, List, Optional, Any
from datetime import datetime
import json

class ExplicadorSinais:
    """
    Sistema de Explica√ß√µes Educativas para Sinais de Trading
    Transforma an√°lise t√©cnica em conhecimento educativo
    """
    
    def __init__(self):
        self.templates_explicacao = {
            'base_tecnica': "üìä AN√ÅLISE T√âCNICA:\n{indicadores}",
            'contexto_vwap': "üè¶ CONTEXTO VWAP:\n{analise_vwap}",
            'contexto_macro': "üåç CONTEXTO MACRO:\n{analise_macro}",
            'gestao_risco': "üí∞ GEST√ÉO DE RISCO:\n{detalhes_posicao}",
            'confluencia': "üéØ CONFLU√äNCIA:\n{analise_confluencia}",
            'educativo': "üéì CONCEITOS:\n{conteudo_educativo}"
        }
        
        # Biblioteca educativa expandida
        self.biblioteca_educativa = {
            'explicacao_vwap': {
                'basico': """VWAP (Volume Weighted Average Price):
‚Ä¢ Pre√ßo m√©dio ponderado pelo volume
‚Ä¢ Refer√™ncia institucional padr√£o
‚Ä¢ Efeito "√≠m√£" - pre√ßo tende a retornar""",
                
                'detalhado': """VWAP - Ferramenta Institucional:
‚Ä¢ C√°lculo: Œ£(Pre√ßo √ó Volume) / Œ£(Volume)
‚Ä¢ Usado por fundos e bancos como benchmark
‚Ä¢ Abaixo VWAP = Zona de compra institucional
‚Ä¢ Acima VWAP = Poss√≠vel resist√™ncia/distribui√ß√£o
‚Ä¢ Desvios >3% frequentemente revertem
‚Ä¢ Reset: Di√°rio (00:00 UTC), Semanal (Dom 21h)""",
                
                'profissional': """VWAP - An√°lise Institucional Avan√ßada:
‚Ä¢ M√©todo Maria Silveira: VWAP ancorada em eventos
‚Ä¢ Timeframes m√∫ltiplos revelam estrutura institucional
‚Ä¢ Conflu√™ncia VWAP D+S+M = zonas de alta probabilidade
‚Ä¢ Volume Profile + VWAP = mapeamento institucional
‚Ä¢ Desvios extremos (>4%) = oportunidades contrarian
‚Ä¢ Bias institucional: Compra Forte (<-3%), Venda Forte (>+3%)"""
            },
            
            'explicacao_analise_macro': {
                'basico': """Contexto Macro:
‚Ä¢ Eventos econ√¥micos afetam crypto
‚Ä¢ FOMC = reuni√£o do Fed americano
‚Ä¢ Fear & Greed = sentimento do mercado""",
                
                'detalhado': """An√°lise Macro Crypto:
‚Ä¢ FOMC: Decis√µes de juros impactam crypto
‚Ä¢ Fear & Greed Index: 0-100 (medo-gan√¢ncia)
‚Ä¢ Volatilidade aumenta em eventos macro
‚Ä¢ Position sizing deve ajustar por risco
‚Ä¢ Efeito weekend: menor liquidez""",
                
                'profissional': """Contexto Macro - Vis√£o Institucional:
‚Ä¢ Proximidade FOMC: Volatilidade 2-5x normal
‚Ä¢ Correla√ß√£o Risk-on/Risk-off com tradicional
‚Ä¢ For√ßa DXY = fraqueza crypto (geralmente)
‚Ä¢ Avalia√ß√£o impacto calend√°rio regulat√≥rio
‚Ä¢ An√°lise integrada flow institucional
‚Ä¢ Monitoramento correla√ß√£o cross-asset"""
            },
            
            'explicacao_indicadores_tecnicos': {
                'rsi': """RSI (Relative Strength Index):
‚Ä¢ Mede for√ßa do movimento (0-100)
‚Ä¢ <30 = Oversold (poss√≠vel alta)
‚Ä¢ >70 = Overbought (poss√≠vel queda)
‚Ä¢ Diverg√™ncias indicam revers√£o""",
                
                'macd': """MACD (Moving Average Convergence Divergence):
‚Ä¢ Cruzamento de m√©dias m√≥veis
‚Ä¢ Linha > Sinal = Momentum bullish
‚Ä¢ Histograma crescente = for√ßa aumentando
‚Ä¢ Diverg√™ncias antecipam revers√µes""",
                
                'volume': """An√°lise de Volume:
‚Ä¢ Volume confirma movimento de pre√ßo
‚Ä¢ Alto volume = interesse institucional
‚Ä¢ Breakout + volume = valida√ß√£o
‚Ä¢ Volume decrescente = perda interesse""",
                
                'confluencia': """Conflu√™ncia de Indicadores:
‚Ä¢ M√∫ltiplos sinais na mesma dire√ß√£o
‚Ä¢ Reduz falsos positivos significativamente
‚Ä¢ RSI + MACD + Volume + VWAP = alta confian√ßa
‚Ä¢ M√≠nimo 3 conflu√™ncias para sinal forte"""
            }
        }
        
        # Templates de explica√ß√£o por tipo de sinal
        self.explicacoes_tipo_sinal = {
            'breakout': """PADR√ÉO BREAKOUT:
‚Ä¢ Pre√ßo rompe resist√™ncia com volume
‚Ä¢ Volume alto confirma interesse comprador
‚Ä¢ Target: Altura do padr√£o projetada
‚Ä¢ Stop: Abaixo da resist√™ncia rompida""",
            
            'reversao': """PADR√ÉO REVERS√ÉO:
‚Ä¢ Sinais de mudan√ßa de tend√™ncia
‚Ä¢ RSI divergente + Volume an√¥malo
‚Ä¢ VWAP como suporte/resist√™ncia din√¢mica
‚Ä¢ Conflu√™ncia m√∫ltipla aumenta probabilidade""",
            
            'continuacao': """PADR√ÉO CONTINUA√á√ÉO:
‚Ä¢ Tend√™ncia principal mantida
‚Ä¢ Corre√ß√£o t√©cnica normal
‚Ä¢ Volume mant√©m interesse
‚Ä¢ VWAP alinhada com dire√ß√£o principal""",
            
            'institucional': """ATIVIDADE INSTITUCIONAL:
‚Ä¢ VWAP como refer√™ncia principal
‚Ä¢ Volume Profile mostra interesse
‚Ä¢ Detec√ß√£o smart money ativa
‚Ä¢ Timing institucional identificado"""
        }
    
    def explicar_sinal_completo(self, dados_sinal: Dict) -> str:
        """
        Gera explica√ß√£o completa e educativa do sinal
        Args:
            dados_sinal: Dict com todos dados do sinal
        Returns:
            String formatada com explica√ß√£o completa
        """
        try:
            partes_explicacao = []
            
            # 1. Resumo executivo
            resumo = self._gerar_resumo_executivo(dados_sinal)
            partes_explicacao.append(resumo)
            
            # 2. An√°lise t√©cnica base
            explicacao_tecnica = self._explicar_base_tecnica(dados_sinal)
            partes_explicacao.append(explicacao_tecnica)
            
            # 3. Contexto VWAP (se dispon√≠vel)
            if 'analise_vwap' in dados_sinal:
                explicacao_vwap = self._explicar_contexto_vwap(dados_sinal['analise_vwap'])
                partes_explicacao.append(explicacao_vwap)
            
            # 4. Contexto macro
            if 'analise_macro' in dados_sinal:
                explicacao_macro = self._explicar_contexto_macro(dados_sinal['analise_macro'])
                partes_explicacao.append(explicacao_macro)
            
            # 5. Conflu√™ncia e probabilidade
            explicacao_confluencia = self._explicar_confluencia(dados_sinal)
            partes_explicacao.append(explicacao_confluencia)
            
            # 6. Gest√£o de risco
            explicacao_risco = self._explicar_gestao_risco(dados_sinal)
            partes_explicacao.append(explicacao_risco)
            
            # 7. Conceitos educativos
            conteudo_educativo = self._adicionar_contexto_educativo(dados_sinal)
            partes_explicacao.append(conteudo_educativo)
            
            return "\n\n".join(partes_explicacao)
            
        except Exception as e:
            return f"Erro ao gerar explica√ß√£o: {e}"
    
    def _gerar_resumo_executivo(self, dados_sinal: Dict) -> str:
        """Gera resumo executivo do sinal"""
        try:
            simbolo = dados_sinal.get('simbolo', 'CRYPTO')
            score = dados_sinal.get('score_aprimorado', dados_sinal.get('score', 0))
            tipo_sinal = dados_sinal.get('tipo_sinal', 'TECNICO')
            
            confianca = self._determinar_nivel_confianca(score)
            recomendacao = self._determinar_recomendacao(score, dados_sinal)
            
            resumo = f"""üéØ RESUMO EXECUTIVO - {simbolo}
            
Score: {score:.0f}/100 ({confianca})
Tipo: {tipo_sinal}
Recomenda√ß√£o: {recomendacao}"""
            
            return resumo
            
        except Exception as e:
            return f"Erro no resumo: {e}"
    
    def _explicar_base_tecnica(self, dados_sinal: Dict) -> str:
        """Explica base t√©cnica detalhadamente"""
        try:
            indicadores = []
            
            # An√°lise RSI
            if 'rsi' in dados_sinal:
                rsi = dados_sinal['rsi']
                explicacao_rsi = self._explicar_rsi(rsi)
                indicadores.append(f"‚Ä¢ RSI: {rsi:.1f} - {explicacao_rsi}")
            
            # An√°lise MACD
            if 'macd' in dados_sinal and 'sinal_macd' in dados_sinal:
                macd = dados_sinal['macd']
                sinal_macd = dados_sinal['sinal_macd']
                explicacao_macd = self._explicar_macd(macd, sinal_macd)
                indicadores.append(f"‚Ä¢ MACD: {explicacao_macd}")
            
            # An√°lise Volume
            if 'ratio_volume' in dados_sinal:
                ratio_volume = dados_sinal['ratio_volume']
                explicacao_volume = self._explicar_volume(ratio_volume)
                indicadores.append(f"‚Ä¢ Volume: {ratio_volume:.1f}x - {explicacao_volume}")
            
            # An√°lise OBV
            if 'tendencia_obv' in dados_sinal:
                tendencia_obv = dados_sinal['tendencia_obv']
                explicacao_obv = "Compradores dominando" if tendencia_obv > 0 else "Vendedores dominando"
                indicadores.append(f"‚Ä¢ OBV: {explicacao_obv}")
            
            base_tecnica = self.templates_explicacao['base_tecnica'].format(
                indicadores="\n".join(indicadores) if indicadores else "An√°lise t√©cnica b√°sica"
            )
            
            return base_tecnica
            
        except Exception as e:
            return f"Erro an√°lise t√©cnica: {e}"
    
    def _explicar_rsi(self, rsi: float) -> str:
        """Explica RSI contextualmente"""
        if rsi < 20:
            return "Oversold extremo - press√£o vendedora excessiva, revers√£o prov√°vel"
        elif rsi < 30:
            return "Oversold - zona de poss√≠vel compra, aguardar confirma√ß√£o"
        elif rsi < 40:
            return "Fraqueza moderada - tend√™ncia baixista ainda ativa"
        elif rsi > 80:
            return "Overbought extremo - corre√ß√£o iminente, cautela"
        elif rsi > 70:
            return "Overbought - zona de poss√≠vel venda, monitorar diverg√™ncias"
        elif rsi > 60:
            return "For√ßa moderada - tend√™ncia altista saud√°vel"
        else:
            return "Zona neutra - aguardar defini√ß√£o direcional"
    
    def _explicar_macd(self, macd: float, sinal_macd: float) -> str:
        """Explica MACD contextualmente"""
        if macd > sinal_macd:
            momentum = "crescente" if macd > 0 else "recuperando"
            return f"Bullish ({momentum}) - momentum favor compradores"
        else:
            momentum = "decrescente" if macd < 0 else "enfraquecendo"
            return f"Bearish ({momentum}) - momentum favor vendedores"
    
    def _explicar_volume(self, ratio_volume: float) -> str:
        """Explica volume contextualmente"""
        if ratio_volume > 3.0:
            return "Volume extremo - interesse institucional forte"
        elif ratio_volume > 2.0:
            return "Volume alto - valida√ß√£o do movimento"
        elif ratio_volume > 1.5:
            return "Volume acima m√©dia - interesse crescente"
        elif ratio_volume > 0.8:
            return "Volume normal - sem sinais especiais"
        else:
            return "Volume baixo - cautela, movimento n√£o validado"
    
    def _explicar_contexto_vwap(self, analise_vwap: Dict) -> str:
        """Explica contexto VWAP detalhadamente"""
        try:
            dist_diaria = analise_vwap.get('distancia_diaria_pct', 0)
            dist_semanal = analise_vwap.get('distancia_semanal_pct', 0)
            bias_institucional = analise_vwap.get('bias_institucional', 'NEUTRO')
            contexto_educativo = analise_vwap.get('contexto_educativo', '')
            
            explicacao_vwap = f"""üè¶ CONTEXTO VWAP:
‚Ä¢ Di√°ria: {dist_diaria:+.1f}% ({analise_vwap.get('posicao_diaria', 'N/A')})
‚Ä¢ Semanal: {dist_semanal:+.1f}% ({analise_vwap.get('posicao_semanal', 'N/A')})
‚Ä¢ Bias Institucional: {bias_institucional}

üìö EXPLICA√á√ÉO:
{contexto_educativo}

üéØ N√çVEIS CHAVE:
‚Ä¢ VWAP Di√°ria: ${analise_vwap.get('vwap_diario', 0):,.2f}
‚Ä¢ VWAP Semanal: ${analise_vwap.get('vwap_semanal', 0):,.2f}"""
            
            # Adicionar alertas se existirem
            if 'alertas_desvio' in analise_vwap:
                alertas = analise_vwap['alertas_desvio']
                if alertas:
                    textos_alerta = [f"‚ö†Ô∏è {alerta['mensagem']}" for alerta in alertas]
                    explicacao_vwap += f"\n\nüö® ALERTAS:\n" + "\n".join(textos_alerta)
            
            return explicacao_vwap
            
        except Exception as e:
            return f"Erro explica√ß√£o VWAP: {e}"
    
    def _explicar_contexto_macro(self, analise_macro: Dict) -> str:
        """Explica contexto macro detalhadamente"""
        try:
            score_risco = analise_macro.get('score_risco_total', 0)
            nivel_risco = analise_macro.get('nivel_risco', 'DESCONHECIDO')
            ajuste_pos = analise_macro.get('ajuste_posicao', 1.0)
            explicacao = analise_macro.get('explicacao', '')
            recomendacao = analise_macro.get('recomendacao', '')
            
            explicacao_macro = f"""üåç CONTEXTO MACRO:
‚Ä¢ Score Risco: {score_risco:.1f}/10 ({nivel_risco})
‚Ä¢ Ajuste Posi√ß√£o: {ajuste_pos:.1f}x
‚Ä¢ Situa√ß√£o: {explicacao}

üìã BREAKDOWN RISCOS:"""
            
            # Adicionar breakdown se dispon√≠vel
            if 'breakdown_risco' in analise_macro:
                breakdown = analise_macro['breakdown_risco']
                for tipo_risco, valor in breakdown.items():
                    if valor > 0:
                        nome_risco = tipo_risco.replace('_', ' ').title()
                        explicacao_macro += f"\n‚Ä¢ {nome_risco}: {valor:.1f}"
            
            explicacao_macro += f"\n\nüí° RECOMENDA√á√ÉO:\n{recomendacao}"
            
            # Pr√≥ximo evento de risco
            if 'proximo_evento_risco' in analise_macro:
                proximo_evento = analise_macro['proximo_evento_risco']
                if proximo_evento.get('evento') and proximo_evento.get('evento') != 'Nenhum evento major identificado':
                    explicacao_macro += f"\n\nüìÖ PR√ìXIMO EVENTO:\n{proximo_evento['evento']}"
                    if proximo_evento.get('dias_restantes'):
                        explicacao_macro += f" (em {proximo_evento['dias_restantes']} dias)"
            
            return explicacao_macro
            
        except Exception as e:
            return f"Erro explica√ß√£o macro: {e}"
    
    def _explicar_confluencia(self, dados_sinal: Dict) -> str:
        """Explica conflu√™ncia de fatores"""
        try:
            confluencias = []
            score_total = dados_sinal.get('score_aprimorado', dados_sinal.get('score', 0))
            
            # Identificar conflu√™ncias ativas
            if dados_sinal.get('rsi', 0) < 35:
                confluencias.append("RSI Oversold")
            
            if dados_sinal.get('ratio_volume', 0) > 1.5:
                confluencias.append("Volume Elevado")
            
            if 'analise_vwap' in dados_sinal:
                bias_vwap = dados_sinal['analise_vwap'].get('bias_institucional', '')
                if 'COMPRA' in bias_vwap:
                    confluencias.append("VWAP Bullish")
            
            if 'analise_macro' in dados_sinal:
                risco_macro = dados_sinal['analise_macro'].get('score_risco_total', 5)
                if risco_macro < 3:
                    confluencias.append("Macro Favor√°vel")
            
            count_confluencia = len(confluencias)
            nivel_confianca = self._calcular_confianca_confluencia(count_confluencia)
            
            explicacao_confluencia = f"""üéØ AN√ÅLISE DE CONFLU√äNCIA:
            
Fatores Confirmando: {count_confluencia}
‚Ä¢ {' + '.join(confluencias) if confluencias else 'An√°lise individual'}

Confian√ßa: {nivel_confianca}
Score Final: {score_total:.0f}/100

üìä INTERPRETA√á√ÉO:
{self._interpretar_nivel_confluencia(count_confluencia)}"""
            
            return explicacao_confluencia
            
        except Exception as e:
            return f"Erro an√°lise conflu√™ncia: {e}"
    
    def _explicar_gestao_risco(self, dados_sinal: Dict) -> str:
        """Explica gest√£o de risco detalhadamente"""
        try:
            entrada = dados_sinal.get('preco_entrada', 0)
            stop = dados_sinal.get('stop_loss', 0)
            target = dados_sinal.get('target', 0)
            tamanho_posicao = dados_sinal.get('tamanho_posicao', 0)
            
            # Calcular risk/reward
            if entrada > 0 and stop > 0 and target > 0:
                valor_risco = entrada - stop
                valor_recompensa = target - entrada
                ratio_rr = valor_recompensa / valor_risco if valor_risco > 0 else 0
            else:
                ratio_rr = 0
            
            explicacao_risco = f"""üí∞ GEST√ÉO DE RISCO:
            
Entrada: R$ {entrada:,.2f}
Stop Loss: R$ {stop:,.2f}
Target: R$ {target:,.2f}
Risk/Reward: 1:{ratio_rr:.1f}

Posi√ß√£o Recomendada: R$ {tamanho_posicao:,.0f}
Perda M√°xima: R$ {tamanho_posicao * (valor_risco/entrada if entrada > 0 else 0.02):,.0f}

üõ°Ô∏è PROTE√á√ïES ATIVAS:"""
            
            # Explicar ajustes macro
            if 'analise_macro' in dados_sinal:
                adj = dados_sinal['analise_macro'].get('ajuste_posicao', 1.0)
                if adj < 1.0:
                    reducao_pct = (1 - adj) * 100
                    explicacao_risco += f"\n‚Ä¢ Posi√ß√£o reduzida {reducao_pct:.0f}% por risco macro"
            
            # Explicar tipo de stop
            explicacao_risco += f"\n‚Ä¢ Stop din√¢mico baseado em ATR"
            
            if 'analise_vwap' in dados_sinal:
                explicacao_risco += f"\n‚Ä¢ Stop ajustado por n√≠veis VWAP"
            
            return explicacao_risco
            
        except Exception as e:
            return f"Erro explica√ß√£o risco: {e}"
    
    def _adicionar_contexto_educativo(self, dados_sinal: Dict) -> str:
        """Adiciona contexto educativo baseado no sinal"""
        try:
            conceitos = []
            
            # Conceito VWAP se presente
            if 'analise_vwap' in dados_sinal:
                conceitos.append("üìö VWAP INSTITUCIONAL:")
                conceitos.append(self.biblioteca_educativa['explicacao_vwap']['detalhado'])
            
            # Conceito Macro se relevante
            if 'analise_macro' in dados_sinal:
                risco_macro = dados_sinal['analise_macro'].get('score_risco_total', 0)
                if risco_macro > 3:
                    conceitos.append("\nüìö RISCO MACRO:")
                    conceitos.append(self.biblioteca_educativa['explicacao_analise_macro']['detalhado'])
            
            # Conceito conflu√™ncia
            confluencias = self._contar_confluencias(dados_sinal)
            if confluencias >= 3:
                conceitos.append("\nüìö CONFLU√äNCIA:")
                conceitos.append(self.biblioteca_educativa['explicacao_indicadores_tecnicos']['confluencia'])
            
            conteudo_educativo = "\n".join(conceitos) if conceitos else "üéì Use /aprenda_vwap para tutoriais detalhados"
            
            return f"üéì CONCEITOS EDUCATIVOS:\n{conteudo_educativo}"
            
        except Exception as e:
            return f"Erro contexto educativo: {e}"
    
    def _determinar_nivel_confianca(self, score: float) -> str:
        """Determina n√≠vel de confian√ßa baseado no score"""
        if score >= 85:
            return "MUITO ALTA"
        elif score >= 75:
            return "ALTA"
        elif score >= 65:
            return "M√âDIA-ALTA"
        elif score >= 55:
            return "M√âDIA"
        else:
            return "BAIXA"
    
    def _determinar_recomendacao(self, score: float, dados_sinal: Dict) -> str:
        """Determina recomenda√ß√£o baseada no score e contexto"""
        # Ajustar por risco macro
        risco_macro = 0
        if 'analise_macro' in dados_sinal:
            risco_macro = dados_sinal['analise_macro'].get('score_risco_total', 0)
        
        score_ajustado = score - (risco_macro * 2)  # Penaliza por risco macro
        
        if score_ajustado >= 85:
            return "EXECUTAR - Alta probabilidade"
        elif score_ajustado >= 75:
            return "CONSIDERAR - Boa oportunidade"
        elif score_ajustado >= 65:
            return "MONITORAR - Aguardar confirma√ß√£o"
        else:
            return "AGUARDAR - Sinais insuficientes"
    
    def _calcular_confianca_confluencia(self, count_confluencia: int) -> str:
        """Calcula confian√ßa baseada no n√∫mero de conflu√™ncias"""
        if count_confluencia >= 4:
            return "MUITO ALTA (4+ fatores)"
        elif count_confluencia >= 3:
            return "ALTA (3 fatores)"
        elif count_confluencia >= 2:
            return "M√âDIA (2 fatores)"
        elif count_confluencia >= 1:
            return "BAIXA (1 fator)"
        else:
            return "MUITO BAIXA (sem conflu√™ncia)"
    
    def _interpretar_nivel_confluencia(self, count_confluencia: int) -> str:
        """Interpreta o n√≠vel de conflu√™ncia"""
        if count_confluencia >= 4:
            return "Conflu√™ncia excepcional - m√∫ltiplos fatores confirmam dire√ß√£o. Alta probabilidade de sucesso."
        elif count_confluencia >= 3:
            return "Boa conflu√™ncia - v√°rios fatores alinhados. Sinal confi√°vel para execu√ß√£o."
        elif count_confluencia >= 2:
            return "Conflu√™ncia moderada - alguns fatores confirmam. Considerar com gest√£o de risco adequada."
        elif count_confluencia >= 1:
            return "Conflu√™ncia baixa - poucos fatores confirmam. Aguardar mais sinais antes de executar."
        else:
            return "Sem conflu√™ncia - fatores n√£o alinhados. Evitar execu√ß√£o at√© melhor defini√ß√£o."
    
    def _contar_confluencias(self, dados_sinal: Dict) -> int:
        """Conta n√∫mero de conflu√™ncias ativas"""
        count = 0
        
        if dados_sinal.get('rsi', 50) < 35 or dados_sinal.get('rsi', 50) > 65:
            count += 1
        
        if dados_sinal.get('ratio_volume', 1) > 1.5:
            count += 1
        
        if 'analise_vwap' in dados_sinal:
            bias = dados_sinal['analise_vwap'].get('bias_institucional', 'NEUTRO')
            if bias in ['COMPRA', 'COMPRA_FORTE', 'VENDA', 'VENDA_FORTE']:
                count += 1
        
        if 'analise_macro' in dados_sinal:
            risco = dados_sinal['analise_macro'].get('score_risco_total', 5)
            if risco < 3:  # Baixo risco = conflu√™ncia positiva
                count += 1
        
        return count
    
    def gerar_explicacao_telegram(self, dados_sinal: Dict) -> str:
        """Gera explica√ß√£o formatada para Telegram"""
        explicacao = self.explicar_sinal_completo(dados_sinal)
        
        # Adicionar comandos educativos
        comandos_educativos = [
            "",
            "üéì APRENDER MAIS:",
            "/aprenda_vwap - Tutorial VWAP completo",
            "/contexto_macro - Situa√ß√£o macro atual",
            "/explica_risco - Por que posi√ß√£o foi ajustada",
            "/aprenda_confluencia - Como funciona conflu√™ncia"
        ]
        
        return explicacao + "\n" + "\n".join(comandos_educativos)
    
    def explicar_conceito_especifico(self, conceito: str, nivel: str = 'detalhado') -> str:
        """Explica conceito espec√≠fico em n√≠vel escolhido"""
        conceito_lower = conceito.lower()
        
        if 'vwap' in conceito_lower:
            return self.biblioteca_educativa['explicacao_vwap'].get(nivel, 'Conceito n√£o encontrado')
        elif 'macro' in conceito_lower:
            return self.biblioteca_educativa['explicacao_analise_macro'].get(nivel, 'Conceito n√£o encontrado')
        elif 'rsi' in conceito_lower:
            return self.biblioteca_educativa['explicacao_indicadores_tecnicos']['rsi']
        elif 'macd' in conceito_lower:
            return self.biblioteca_educativa['explicacao_indicadores_tecnicos']['macd']
        elif 'volume' in conceito_lower:
            return self.biblioteca_educativa['explicacao_indicadores_tecnicos']['volume']
        elif 'confluencia' in conceito_lower:
            return self.biblioteca_educativa['explicacao_indicadores_tecnicos']['confluencia']
        else:
            return "Conceito n√£o encontrado. Conceitos dispon√≠veis: VWAP, Macro, RSI, MACD, Volume, Conflu√™ncia"
